(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/applications/GRS/controllers/complaint.py'
p5
sS'code'
p6
S"@request.restful()\ndef details():\n\tresponse.view = 'generic.json'\n\tdef GET(*tmp_args,**status_input):\n\t\tdata = db.complaints(id=request.args[0])\n\t\tret={}\n\t\tret['complaint_id']=data.id\n\t\tret['title']=data.complaint_title\n\t\tret['description']=data.complaint_details\n\t\tret['posted_by']=data.posted_by\n\t\tret['image_id']=data.photo_id\n\t\tret['posted_on']=data.date_posted\n\t\tret['work_started']=data.date_work_taken_on\n\t\tret['resolved_on']=data.date_resolved\n\t\tret['upvote_count']=data.upvotes_count\n\t\tret['downvote_count']=data.downvotes_count\n\t\tret['level_name']=data.complaint_levels(id=data.complaint_level_id).complaint_level_name\n\t\tret['level_id']=data.complaint_level_id\n\t\tret['domain_name']=db.complaint_domain(id=data.complaint_domain_id).complaint_domain_name\n\t\tret['domain_id']=data.complaint_domain_id\n\n\t\tret['status_id']=data.status_id\n\n\t\tret['vote_status']=data.complaint_title\n\n#\t\tret['undertaken_by']=data.complaint_title\n\n\t\tret['previously_read']=data.complaint_title\n\n\t\tret['bookmarked']=check_bookmark(auth.user.id,data.id)\n\t\treturn dict(data=ret)\n\n\treturn locals()\n\n@request.restful()\ndef levels():\n\tresponse.view = 'generic.json'\n\tdef GET():\n\t\treturn dict(data = db(db.complaint_levels.id>0).select())\n\treturn locals()\n\n@request.restful()\ndef domains():\n\tresponse.view = 'generic.json'\n\tdef GET(level_id):\n\t\treturn dict(data = db(db.complaint_domain.complaint_level_id==level_id).select())\n\treturn locals()\n\n@request.restful()\ndef bookmark():\n\tresponse.view = 'generic.json'\n\tdef GET(complaint_id):\n\t\tdata = db(db.bookmarks.complaint_id==complaint_id).select()\n\t\tif len(data)>0:\n\t\t\treturn dict(bookmarked = True)\n\t\telse:\n\t\t\treturn dict(bookmarked = False)\n\treturn locals()\n\n@request.restful()\ndef status():\n\tresponse.view = 'generic.json'\n\tdef GET(*tmp_args,**status_input):\n\t\tif(tmp_args[0]=='comment'):\n\t\t\tret_status = db[db.status_comments].validate_and_insert(**status_input)\n\t\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\t\tfor index in range(len(book_usrs)):\n\t\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=2,notification_item_id=ret_cmnt)\n\t\t\treturn ret_status\n\t\telse:\n\t\t\tret_status = db[db.complaint_status].validate_and_insert(**status_input)\n\t\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\t\tfor index in range(len(book_usrs)):\n\t\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=2,notification_item_id=ret_cmnt)\n\t\t\treturn ret_status\n\tdef POST(*tmp_args,**status_input):\n\t\tif(tmp_args[0]=='comment'):\n\t\t\tret_status = db[db.status_comments].validate_and_insert(**status_input)\n\t\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\t\tfor index in range(len(book_usrs)):\n\t\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=2,notification_item_id=ret_cmnt)\n\t\t\treturn ret_status\n\t\telse:\n\t\t\tret_status = db[db.complaint_status].validate_and_insert(**status_input)\n\t\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\t\tfor index in range(len(book_usrs)):\n\t\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=2,notification_item_id=ret_cmnt)\n\t\t\treturn ret_status\n\treturn locals()\n\n@request.restful()\ndef complaints():\n\tresponse.view = 'generic.json'\n\tdef GET(*tmp_args,**status_input):\n\t\tif not auth.is_logged_in() :\n\t\t\treturn dict()\n\t\tcomplaint_section=request.args[0]\n\t\tuser_id=auth.user.id\n\t\tif(complaint_section=='bookmarked'):\n\t\t\tall_made = db(db.bookmarks.complaint_id>0).select()\n\t\t\tret = []\n\t\t\tfor index in range(len(all_made)):\n\t\t\t\tfrom_user = all_made[index].user_id\n\t\t\t\tto_group = all_made[index].group_id\n\t\t\t\tuser_id1 = db.users(id=user_id).id\n\t\t\t\tif(from_user == user_id1):\n\t\t\t\t\tret.append(all_made[index])\n\t\t\t\telse:\n\t\t\t\t\tall_members = db(db.group_members.group_id==to_group).select()\n\t\t\t\t\tfor index1 in range(len(all_members)):\n\t\t\t\t\t\tuser1 = db.users(id=all_members[index1].user_id).id\n\t\t\t\t\t\tif(user1==user_id1):\n\t\t\t\t\t\t\tret.append(all_made[index])\n\t\t\treturn dict(data = ret)\n\t\telif(complaint_section=='concern'):\n\t\t\tall_made = db(db.complaints_concerning_user.complaint_id>0).select()\n\t\t\tret = []\n\t\t\tfor index in range(len(all_made)):\n\t\t\t\tfrom_user = all_made[index].user_id\n\t\t\t\tto_group = all_made[index].group_id\n\t\t\t\tuser_id1 = db.users(id=user_id).id\n\t\t\t\tif(from_user == user_id1):\n\t\t\t\t\tret.append(all_made[index])\n\t\t\t\telse:\n\t\t\t\t\tall_members = db(db.group_members.group_id==to_group).select()\n\t\t\t\t\tfor index1 in range(len(all_members)):\n\t\t\t\t\t\tuser1 = db.users(id=all_members[index1].user_id).id\n\t\t\t\t\t\tif(user1==user_id1):\n\t\t\t\t\t\t\tret.append(all_made[index])\n\t\t\treturn dict(data = ret)\n\t\telif(complaint_section=='resolve'):\n\t\t\tall_made = db(db.complaints_with_resolving_rights_to_user.complaint_id>0).select()\n\t\t\tret = []\n\t\t\tfor index in range(len(all_made)):\n\t\t\t\tfrom_user = all_made[index].user_id\n\t\t\t\tto_group = all_made[index].group_id\n\t\t\t\tuser_id1 = db.users(id=user_id).id\n\t\t\t\tif(from_user == user_id1):\n\t\t\t\t\tret.append(all_made[index])\n\t\t\t\telse:\n\t\t\t\t\tall_members = db(db.group_members.group_id==to_group).select()\n\t\t\t\t\tfor index1 in range(len(all_members)):\n\t\t\t\t\t\tuser1 = db.users(id=all_members[index1].user_id).id\n\t\t\t\t\t\tif(user1==user_id1):\n\t\t\t\t\t\t\tret.append(all_made[index])\n\t\t\treturn dict(data = ret)\n\t\telif(complaint_section=='solve'):\n\t\t\tall_made = db(db.complaints_made_to_user.complaint_id>0).select()\n\t\t\tret = []\n\t\t\tfor index in range(len(all_made)):\n\t\t\t\tfrom_user = all_made[index].user_id\n\t\t\t\tto_group = all_made[index].group_id\n\t\t\t\tuser_id1 = db.users(id=user_id).id\n\t\t\t\tif(from_user == user_id1):\n\t\t\t\t\tret.append(all_made[index])\n\t\t\t\telse:\n\t\t\t\t\tall_members = db(db.group_members.group_id==to_group).select()\n\t\t\t\t\tfor index1 in range(len(all_members)):\n\t\t\t\t\t\tuser1 = db.users(id=all_members[index1].user_id).id\n\t\t\t\t\t\tif(user1==user_id1):\n\t\t\t\t\t\t\tret.append(all_made[index])\n\t\t\treturn dict(data = ret)\n\treturn locals()\n\n\n@request.restful()\ndef create():\n\tresponse.view = 'generic.json'\n\tdef make_complaint(complaint_id,user_id,present_level_name,present_domain_name):\n\t\tif present_level_name=='Individual':\n\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=user_id)\n\t\t\tconcern = db.complaints_concerning_user.insert(complaint_id=complaint_id,id_type=0,user_id=user_id)\n\t\t\tif present_domain_name=='Electricity':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Electricity Department').id)\n\t\t\telif present_domain_name=='Plumbing':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Plumbing Department').id)\n\t\t\telif present_domain_name=='Carpentry':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Carpentry Department').id)\n\t\t\telif present_domain_name=='UG Section':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='UG Section').id)\n\t\t\telif present_domain_name=='PG Section':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='PG Section').id)\n\t\t\telif present_domain_name=='Accounts Section':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Accounts Section').id)\n\t\t\telif present_domain_name=='Students Counselling Service':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Students Counselling Service').id)\n\t\t\telif present_domain_name=='Ragging':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Students Counselling Service').id)\n\t\t\telif present_domain_name=='Hostel Administration':\n\t\t\t\thstl = db.users(id=user_id).hostel_id;\n\t\t\t\thostel_admin_grp = db.hostels(id=hstl).hostel_admin_group_id;\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\telif present_domain_name=='Security':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Security Department').id)\n\t\t\t\n\n\t\t\telif present_domain_name=='Miscellaneous':\n\t\t\t\tcmplt = db[db.complaints].validate_and_insert(**complaint_input)\n\n\n\t\telif present_level_name=='Hostel':\n\n\t\t\thstl = db.users(id=user_id).hostel_id;\n\t\t\thostel_admin_grp = db.hostels(id=hstl).hostel_admin_group_id;\n\t\t\thostel_res_grp = db.hostels(id=hstl).hostel_residents_group_id;\n\t\t\tmess_secretry = db.hostel_management(hostel_id=hstl).mess_secretary_user_id\n\t\t\tmaintenance_secretry = db.hostel_management(hostel_id=hstl).mess_secretary_user_id\n\t\t\tsports_secretry = db.hostel_management(hostel_id=hstl).mess_secretary_user_id\n\t\t\tconcern = db.complaints_concerning_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_res_grp)\n\t\t\tif present_domain_name=='Infrastructure':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\telif present_domain_name=='Mess':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=mess_secretry)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=mess_secretry)\n\t\t\telif present_domain_name=='Administration':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\telif present_domain_name=='Security':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\telif present_domain_name=='Sports':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=sports_secretry)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=sports_secretry)\n\t\t\telif present_domain_name=='Maintenance':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=maintenance_secretry)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=maintenance_secretary)\n\n\t\t\telif present_domain_name=='Miscellaneous':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=hostel_admin_grp)\n\n\t\telif present_level_name=='Institute':\n\t\t\tconcern = db.complaints_concerning_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute').id)\n\t\t\tif present_domain_name=='Infrastructure':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\telif present_domain_name=='Administration':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\telif present_domain_name=='Canteen and Food Outlets':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSW').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSW').id)\n\t\t\telif present_domain_name=='Security':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSW').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSW').id)\n\t\t\telif present_domain_name=='Sports':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSA').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BSA').id)\n\t\t\telif present_domain_name=='Culture':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BRCA').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='BRCA').id)\n\t\t\telif present_domain_name=='Academics':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\telif present_domain_name=='Computer Services Centre':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Computer Services Centre').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Computer Services Centre').id)\n\t\t\telif present_domain_name=='Maintenance':\n\t\t\t\tcmplt = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\t\t\t\tcmplt_rslv = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=db.user_group_names(group_name='Institute Administration').id)\n\n\n\t\t\telif present_domain_name=='Miscellaneous':\n\t\t\t\tcmplt = db[db.complaints].validate_and_insert(**complaint_input)\n\n\n\t\telse:\treturn dict(status = 'TO do===Miscellaneous')\n\tdef POST(*tmp_args,**complaint_input):\n\t\tcmplt = db[db.complaints].validate_and_insert(**complaint_input)\n\t\tcomplaint_id = cmplt.id\n\t\tuser_id = db.users(id=request.vars.posted_by)\n\t\tpresent_domain_name = db.complaint_domain(id=request.vars.complaint_domain_id).complaint_domain_name\n\t\tpresent_level_name = db.complaint_levels(id=db.complaint_domain(id=request.vars.complaint_domain_id).complaint_level_id).complaint_level_name\n\t\treturn make_complaint(complaint_id,user_id,present_level_name,present_domain_name)\n\tdef GET(*tmp_args,**complaint_input):\n\t\tcmplt = db[db.complaints].validate_and_insert(**complaint_input)\n\t\tcomplaint_id = cmplt.id\n\t\tuser_id = db.users(id=request.vars.posted_by)\n\t\tpresent_domain_name = db.complaint_domain(id=request.vars.complaint_domain_id).complaint_domain_name\n\t\tpresent_level_name = db.complaint_levels(id=db.complaint_domain(id=request.vars.complaint_domain_id).complaint_level_id).complaint_level_name\n\t\treturn make_complaint(complaint_id,user_id,present_level_name,present_domain_name)\n\treturn locals()\n\n@request.restful()\ndef vote():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**vote_input):\n\t\treturn db[db.votes].validate_and_insert(**vote_input)\n\tdef GET(*tmp_args,**vote_input):\n\t\treturn db[db.votes].validate_and_insert(**vote_input)\n\treturn locals()\n\n@request.restful()\ndef follow():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tfllw = db[db.bookmarks].validate_and_insert(**follow_input)\n\t\tdb.executesql('UPDATE bookmarks SET user_id='+str(auth.user.id)+' WHERE id='+str(fllw.id)+';')\n\t\treturn dict(success=True)\n\tdef GET(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tfllw = db[db.bookmarks].validate_and_insert(**follow_input)\n\t\tdb.executesql('UPDATE bookmarks SET user_id='+str(auth.user.id)+' WHERE id='+str(fllw.id)+';')\n\t\treturn dict(success=True)\n\treturn locals()\n\n@request.restful()\ndef unfollow():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tdb.executesql('DELETE FROM bookmarks WHERE complaint_id='+str(request.vars.complaint_id)+' AND user_id='+str(auth.user.id)+';')\n\t\treturn dict(success=True)\n\tdef GET(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tdb.executesql('DELETE FROM bookmarks WHERE complaint_id='+str(request.vars.complaint_id)+' AND user_id='+str(auth.user.id)+';')\n\t\treturn dict(success=True)\n\treturn locals()\n\n@request.restful()\ndef read():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\treturn db[db.complaint_read].validate_and_insert(**follow_input)\n\tdef GET(*tmp_args,**follow_input):\n\t\treturn db[db.complaint_read].validate_and_insert(**follow_input)\n\treturn locals()\n\n@request.restful()\ndef is_read():\n\tresponse.view = 'generic.json'\n\tdef GET(complaint_id):\n\t\tdata = db(db.complaint_read.complaint_id==complaint_id).select()\n\t\tif len(data)>0:\n\t\t\treturn dict(read = True)\n\t\telse:\n\t\t\treturn dict(read = False)\n    \treturn locals()\n\n@request.restful()\ndef redirect():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tuserid_from = request.vars.redirect_from\n\t\tredirect_type = request.vars.redirect_to_type\n\t\tuserid_to = request.vars.redirect_to\n\t\tcomplaint_id = request.vars.complaint_id\n\t\tdone = db.executesql('UPDATE complaints SET redirected_to_user_id='+str(userid_to)+', redirected_to_type='+str(redirect_type)+', redirected_by_user_id='+str(userid_from)+' WHERE id='+str(complaint_id)+';')\n\t\tif(redirect_type==0):\n\t\t\tsolve_add = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=userid_to)\n\t\t\tif(check_resolve(userid_from,complaint_id)):\n\t\t\t\tresolve_add = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=userid_to)\n\t\telse:\n\t\t\tsolve_add = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=userid_to)\n\t\t\tuserid_frm = db.users(id=userid_from).id\n\t\t\tif(check_resolve(userid_frm,complaint_id)):\n\t\t\t\tresolve_add = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=userid_to)\n\t\treturn dict(success=True)\n\tdef GET(*tmp_args,**follow_input):\n\t\tuserid_from = request.vars.redirect_from\n\t\tredirect_type = request.vars.redirect_to_type\n\t\tuserid_to = request.vars.redirect_to\n\t\tcomplaint_id = request.vars.complaint_id\n\t\tdone = db.executesql('UPDATE complaints SET redirected_to_user_id='+str(userid_to)+', redirected_to_type='+str(redirect_type)+', redirected_by_user_id='+str(userid_from)+' WHERE id='+str(complaint_id)+';')\n\t\tif(redirect_type==0):\n\t\t\tsolve_add = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=userid_to)\n\t\t\tif(check_resolve(userid_from,complaint_id)):\n\t\t\t\tresolve_add = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=0,user_id=userid_to)\n\t\telse:\n\t\t\tsolve_add = db.complaints_made_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=userid_to)\n\t\t\tuserid_frm = db.users(id=userid_from).id\n\t\t\tif(check_resolve(userid_frm,complaint_id)):\n\t\t\t\tresolve_add = db.complaints_with_resolving_rights_to_user.insert(complaint_id=complaint_id,id_type=1,group_id=userid_to)\n\t\treturn dict(success=True)\n\treturn locals()\n\n\n@request.restful()\ndef comment():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tret_cmnt = db[db.comments].validate_and_insert(**follow_input)\n\t\tdb.executesql('UPDATE comments SET user_id='+auth.user.id+' WHERE id='+ret_cmnt.id+';')\n\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\tfor index in range(len(book_usrs)):\n\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=0,notification_item_id=ret_cmnt)\n\t\treturn ret_cmnt\n\tdef GET(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\tret_cmnt = db[db.comments].validate_and_insert(**follow_input)\n\t\tdb.executesql('UPDATE comments SET user_id='+str(auth.user.id)+' WHERE id='+str(ret_cmnt.id)+';')\n\t\tbook_usrs = db(db.bookmarks.complaint_id==request.vars.complaint_id).select()\n\t\tfor index in range(len(book_usrs)):\n\t\t\tnotif = db.notifications.insert(user_id=book_usrs[index].user_id,notification_type=0,notification_item_id=ret_cmnt)\n\t\treturn ret_cmnt\n\treturn locals()\n\n\ndef check_resolve(user_id,complaint_id):\n\tall_made = db(db.complaints_with_resolving_rights_to_user.complaint_id==complaint_id).select()\n\tret = []\n\tfor index in range(len(all_made)):\n\t\tfrom_user = all_made[index].user_id\n\t\tto_group = all_made[index].group_id\n\t\tuser_id1 = user_id\n\t\tif(from_user == user_id1):\n\t\t\tret.append(all_made[index])\n\t\telse:\n\t\t\tall_members = db(db.group_members.group_id==to_group).select()\n\t\t\tfor index1 in range(len(all_members)):\n\t\t\t\tuser1 = db.users(id=all_members[index1].user_id).id\n\t\t\t\tif(user1==user_id1):\n\t\t\t\t\tret.append(all_made[index])\n\treturn (len(ret)>0)\n\n@request.restful()\ndef resolvable():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\telse:\n\t\t\treturn dict(resolvable = check_resolve(auth.user.id,request.vars.complaint_id))\n\tdef GET(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\telse:\n\t\t\treturn dict(resolvable = check_resolve(auth.user.id,request.vars.complaint_id))\n\treturn locals()\n\n\ndef check_bookmark(user_id,complaint_id):\n\tall_made = db(db.bookmarks.complaint_id==complaint_id).select()\n\tret = []\n\tfor index in range(len(all_made)):\n\t\tfrom_user = all_made[index].user_id\n\t\tuser_id1 = user_id\n\t\tif(from_user == user_id1):\n\t\t\tret.append(all_made[index])\n\treturn (len(ret)>0)\n\n\n@request.restful()\ndef is_bookmark():\n\tresponse.view = 'generic.json'\n\tdef POST(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\telse:\n\t\t\treturn dict(is_bookmark = check_bookmark(auth.user.id,request.vars.complaint_id))\n\tdef GET(*tmp_args,**follow_input):\n\t\tif not auth.is_logged_in():\n\t\t\treturn dict()\n\t\telse:\n\t\t\treturn dict(is_bookmark = check_bookmark(auth.user.id,request.vars.complaint_id))\n\treturn locals()\n\n\nresponse._vars=response._caller(details)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/applications/GRS/controllers/complaint.py", line 472, in <module>\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/gluon/globals.py", line 380, in f\n    res = rest_action(*request.args, **request.vars)\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/applications/GRS/controllers/complaint.py", line 17, in GET\n    ret[\'level_name\']=data.complaint_levels(id=data.complaint_level_id).complaint_level_name\n  File "/home/user/Local Disk E/COP290/assignment2_1/GRS_Grievances_Resolution_System/web2py/gluon/packages/dal/pydal/objects.py", line 90, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.